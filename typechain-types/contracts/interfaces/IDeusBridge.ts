/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export type SchnorrSignStruct = {
  signature: PromiseOrValue<BigNumberish>;
  owner: PromiseOrValue<string>;
  nonce: PromiseOrValue<string>;
};

export type SchnorrSignStructOutput = [BigNumber, string, string] & {
  signature: BigNumber;
  owner: string;
  nonce: string;
};

export interface IDeusBridgeInterface extends utils.Interface {
  functions: {
    "ETH_APP_ID()": FunctionFragment;
    "claim(address,uint256,uint256,uint256,uint256,uint256,bytes,(uint256,address,address)[])": FunctionFragment;
    "claimedTxs(uint256,uint256)": FunctionFragment;
    "collectedFees(uint256)": FunctionFragment;
    "deposit(uint256,uint256,uint256)": FunctionFragment;
    "depositFor(address,uint256,uint256,uint256)": FunctionFragment;
    "emergencyWithdrawERC20Tokens(address,address,uint256)": FunctionFragment;
    "emergencyWithdrawETH(address,uint256)": FunctionFragment;
    "getExecutingChainID()": FunctionFragment;
    "getTransaction(uint256)": FunctionFragment;
    "getUserClaimedTxs(address,uint256)": FunctionFragment;
    "getUserDepositedTxs(address,uint256)": FunctionFragment;
    "getUserTxs(address,uint256,uint256,uint256)": FunctionFragment;
    "lastTxId()": FunctionFragment;
    "minReqSigs()": FunctionFragment;
    "muonContract()": FunctionFragment;
    "network()": FunctionFragment;
    "pause()": FunctionFragment;
    "pendingTxs(uint256,uint256[])": FunctionFragment;
    "scale()": FunctionFragment;
    "setDestChain(uint256)": FunctionFragment;
    "setEthAppId(uint8)": FunctionFragment;
    "setFee(uint256,uint256)": FunctionFragment;
    "setMinReqSigs(uint256)": FunctionFragment;
    "setMuonContract(address)": FunctionFragment;
    "setNetworkID(uint256)": FunctionFragment;
    "setSideContract(uint256,address)": FunctionFragment;
    "setToken(uint256,address)": FunctionFragment;
    "sideContracts(uint256)": FunctionFragment;
    "tokenFees(uint256)": FunctionFragment;
    "tokens(uint256)": FunctionFragment;
    "unpase()": FunctionFragment;
    "withdrawFee(uint256,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ETH_APP_ID"
      | "claim"
      | "claimedTxs"
      | "collectedFees"
      | "deposit"
      | "depositFor"
      | "emergencyWithdrawERC20Tokens"
      | "emergencyWithdrawETH"
      | "getExecutingChainID"
      | "getTransaction"
      | "getUserClaimedTxs"
      | "getUserDepositedTxs"
      | "getUserTxs"
      | "lastTxId"
      | "minReqSigs"
      | "muonContract"
      | "network"
      | "pause"
      | "pendingTxs"
      | "scale"
      | "setDestChain"
      | "setEthAppId"
      | "setFee"
      | "setMinReqSigs"
      | "setMuonContract"
      | "setNetworkID"
      | "setSideContract"
      | "setToken"
      | "sideContracts"
      | "tokenFees"
      | "tokens"
      | "unpase"
      | "withdrawFee"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ETH_APP_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      SchnorrSignStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimedTxs",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "collectedFees",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositFor",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdrawERC20Tokens",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdrawETH",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getExecutingChainID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTransaction",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserClaimedTxs",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserDepositedTxs",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserTxs",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "lastTxId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "minReqSigs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "muonContract",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "network", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingTxs",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(functionFragment: "scale", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setDestChain",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setEthAppId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFee",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinReqSigs",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMuonContract",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setNetworkID",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSideContract",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setToken",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "sideContracts",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenFees",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokens",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "unpase", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawFee",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "ETH_APP_ID", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimedTxs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collectedFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "depositFor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdrawERC20Tokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdrawETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExecutingChainID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserClaimedTxs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserDepositedTxs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getUserTxs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lastTxId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minReqSigs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "muonContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "network", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pendingTxs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "scale", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDestChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEthAppId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMinReqSigs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMuonContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNetworkID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSideContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sideContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenFees", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpase", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFee",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IDeusBridge extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IDeusBridgeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ETH_APP_ID(overrides?: CallOverrides): Promise<[number]>;

    claim(
      user: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      fromChain: PromiseOrValue<BigNumberish>,
      toChain: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      txId: PromiseOrValue<BigNumberish>,
      _reqId: PromiseOrValue<BytesLike>,
      sigs: SchnorrSignStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimedTxs(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    collectedFees(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      toChain: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositFor(
      user: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      toChain: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    emergencyWithdrawERC20Tokens(
      tokenAddr: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    emergencyWithdrawETH(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getExecutingChainID(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTransaction(
      txId_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber
      ] & {
        txId: BigNumber;
        tokenId: BigNumber;
        amount: BigNumber;
        fromChain: BigNumber;
        toChain: BigNumber;
        user: string;
        txBlockNo: BigNumber;
        currentBlockNo: BigNumber;
      }
    >;

    getUserClaimedTxs(
      user: PromiseOrValue<string>,
      fromChain: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getUserDepositedTxs(
      user: PromiseOrValue<string>,
      toChain: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getUserTxs(
      user: PromiseOrValue<string>,
      chain: PromiseOrValue<BigNumberish>,
      offset: PromiseOrValue<BigNumberish>,
      limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[], BigNumber[]]>;

    lastTxId(overrides?: CallOverrides): Promise<[BigNumber]>;

    minReqSigs(overrides?: CallOverrides): Promise<[BigNumber]>;

    muonContract(overrides?: CallOverrides): Promise<[string]>;

    network(overrides?: CallOverrides): Promise<[BigNumber]>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pendingTxs(
      fromChain: PromiseOrValue<BigNumberish>,
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[boolean[]] & { unclaimedIds: boolean[] }>;

    scale(overrides?: CallOverrides): Promise<[BigNumber]>;

    setDestChain(
      chain: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setEthAppId(
      ethAppId_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFee(
      tokenId: PromiseOrValue<BigNumberish>,
      fee_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinReqSigs(
      minReqSigs_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMuonContract(
      muonContract_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setNetworkID(
      network_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSideContract(
      network_: PromiseOrValue<BigNumberish>,
      address_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setToken(
      tokenId: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sideContracts(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    tokenFees(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    unpase(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawFee(
      tokenId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  ETH_APP_ID(overrides?: CallOverrides): Promise<number>;

  claim(
    user: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    fromChain: PromiseOrValue<BigNumberish>,
    toChain: PromiseOrValue<BigNumberish>,
    tokenId: PromiseOrValue<BigNumberish>,
    txId: PromiseOrValue<BigNumberish>,
    _reqId: PromiseOrValue<BytesLike>,
    sigs: SchnorrSignStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimedTxs(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  collectedFees(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  deposit(
    amount: PromiseOrValue<BigNumberish>,
    toChain: PromiseOrValue<BigNumberish>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositFor(
    user: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    toChain: PromiseOrValue<BigNumberish>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  emergencyWithdrawERC20Tokens(
    tokenAddr: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  emergencyWithdrawETH(
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getExecutingChainID(overrides?: CallOverrides): Promise<BigNumber>;

  getTransaction(
    txId_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      BigNumber,
      BigNumber
    ] & {
      txId: BigNumber;
      tokenId: BigNumber;
      amount: BigNumber;
      fromChain: BigNumber;
      toChain: BigNumber;
      user: string;
      txBlockNo: BigNumber;
      currentBlockNo: BigNumber;
    }
  >;

  getUserClaimedTxs(
    user: PromiseOrValue<string>,
    fromChain: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getUserDepositedTxs(
    user: PromiseOrValue<string>,
    toChain: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getUserTxs(
    user: PromiseOrValue<string>,
    chain: PromiseOrValue<BigNumberish>,
    offset: PromiseOrValue<BigNumberish>,
    limit: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber[], BigNumber[]]>;

  lastTxId(overrides?: CallOverrides): Promise<BigNumber>;

  minReqSigs(overrides?: CallOverrides): Promise<BigNumber>;

  muonContract(overrides?: CallOverrides): Promise<string>;

  network(overrides?: CallOverrides): Promise<BigNumber>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pendingTxs(
    fromChain: PromiseOrValue<BigNumberish>,
    ids: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<boolean[]>;

  scale(overrides?: CallOverrides): Promise<BigNumber>;

  setDestChain(
    chain: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setEthAppId(
    ethAppId_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFee(
    tokenId: PromiseOrValue<BigNumberish>,
    fee_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinReqSigs(
    minReqSigs_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMuonContract(
    muonContract_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setNetworkID(
    network_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSideContract(
    network_: PromiseOrValue<BigNumberish>,
    address_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setToken(
    tokenId: PromiseOrValue<BigNumberish>,
    tokenAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sideContracts(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  tokenFees(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokens(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  unpase(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawFee(
    tokenId: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ETH_APP_ID(overrides?: CallOverrides): Promise<number>;

    claim(
      user: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      fromChain: PromiseOrValue<BigNumberish>,
      toChain: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      txId: PromiseOrValue<BigNumberish>,
      _reqId: PromiseOrValue<BytesLike>,
      sigs: SchnorrSignStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    claimedTxs(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    collectedFees(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      toChain: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositFor(
      user: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      toChain: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    emergencyWithdrawERC20Tokens(
      tokenAddr: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    emergencyWithdrawETH(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getExecutingChainID(overrides?: CallOverrides): Promise<BigNumber>;

    getTransaction(
      txId_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber
      ] & {
        txId: BigNumber;
        tokenId: BigNumber;
        amount: BigNumber;
        fromChain: BigNumber;
        toChain: BigNumber;
        user: string;
        txBlockNo: BigNumber;
        currentBlockNo: BigNumber;
      }
    >;

    getUserClaimedTxs(
      user: PromiseOrValue<string>,
      fromChain: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getUserDepositedTxs(
      user: PromiseOrValue<string>,
      toChain: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getUserTxs(
      user: PromiseOrValue<string>,
      chain: PromiseOrValue<BigNumberish>,
      offset: PromiseOrValue<BigNumberish>,
      limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[], BigNumber[]]>;

    lastTxId(overrides?: CallOverrides): Promise<BigNumber>;

    minReqSigs(overrides?: CallOverrides): Promise<BigNumber>;

    muonContract(overrides?: CallOverrides): Promise<string>;

    network(overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: CallOverrides): Promise<void>;

    pendingTxs(
      fromChain: PromiseOrValue<BigNumberish>,
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<boolean[]>;

    scale(overrides?: CallOverrides): Promise<BigNumber>;

    setDestChain(
      chain: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setEthAppId(
      ethAppId_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFee(
      tokenId: PromiseOrValue<BigNumberish>,
      fee_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinReqSigs(
      minReqSigs_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMuonContract(
      muonContract_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setNetworkID(
      network_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSideContract(
      network_: PromiseOrValue<BigNumberish>,
      address_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setToken(
      tokenId: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    sideContracts(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    tokenFees(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    unpase(overrides?: CallOverrides): Promise<void>;

    withdrawFee(
      tokenId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    ETH_APP_ID(overrides?: CallOverrides): Promise<BigNumber>;

    claim(
      user: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      fromChain: PromiseOrValue<BigNumberish>,
      toChain: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      txId: PromiseOrValue<BigNumberish>,
      _reqId: PromiseOrValue<BytesLike>,
      sigs: SchnorrSignStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimedTxs(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collectedFees(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      toChain: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositFor(
      user: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      toChain: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    emergencyWithdrawERC20Tokens(
      tokenAddr: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    emergencyWithdrawETH(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getExecutingChainID(overrides?: CallOverrides): Promise<BigNumber>;

    getTransaction(
      txId_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserClaimedTxs(
      user: PromiseOrValue<string>,
      fromChain: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserDepositedTxs(
      user: PromiseOrValue<string>,
      toChain: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserTxs(
      user: PromiseOrValue<string>,
      chain: PromiseOrValue<BigNumberish>,
      offset: PromiseOrValue<BigNumberish>,
      limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastTxId(overrides?: CallOverrides): Promise<BigNumber>;

    minReqSigs(overrides?: CallOverrides): Promise<BigNumber>;

    muonContract(overrides?: CallOverrides): Promise<BigNumber>;

    network(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pendingTxs(
      fromChain: PromiseOrValue<BigNumberish>,
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    scale(overrides?: CallOverrides): Promise<BigNumber>;

    setDestChain(
      chain: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setEthAppId(
      ethAppId_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFee(
      tokenId: PromiseOrValue<BigNumberish>,
      fee_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinReqSigs(
      minReqSigs_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMuonContract(
      muonContract_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setNetworkID(
      network_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSideContract(
      network_: PromiseOrValue<BigNumberish>,
      address_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setToken(
      tokenId: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sideContracts(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenFees(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unpase(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawFee(
      tokenId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ETH_APP_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claim(
      user: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      fromChain: PromiseOrValue<BigNumberish>,
      toChain: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      txId: PromiseOrValue<BigNumberish>,
      _reqId: PromiseOrValue<BytesLike>,
      sigs: SchnorrSignStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimedTxs(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collectedFees(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      toChain: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositFor(
      user: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      toChain: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    emergencyWithdrawERC20Tokens(
      tokenAddr: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    emergencyWithdrawETH(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getExecutingChainID(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTransaction(
      txId_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserClaimedTxs(
      user: PromiseOrValue<string>,
      fromChain: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserDepositedTxs(
      user: PromiseOrValue<string>,
      toChain: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserTxs(
      user: PromiseOrValue<string>,
      chain: PromiseOrValue<BigNumberish>,
      offset: PromiseOrValue<BigNumberish>,
      limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastTxId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minReqSigs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    muonContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    network(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pendingTxs(
      fromChain: PromiseOrValue<BigNumberish>,
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    scale(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setDestChain(
      chain: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setEthAppId(
      ethAppId_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFee(
      tokenId: PromiseOrValue<BigNumberish>,
      fee_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinReqSigs(
      minReqSigs_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMuonContract(
      muonContract_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setNetworkID(
      network_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSideContract(
      network_: PromiseOrValue<BigNumberish>,
      address_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setToken(
      tokenId: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sideContracts(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenFees(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unpase(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFee(
      tokenId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
